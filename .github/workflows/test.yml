# .github/workflows/test.yml - GitHub Actions CI/CD pipeline for testing

name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        cd backend
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Set up test environment
      run: |
        cd backend
        cp ../.env.example .env
        # Set test API keys (using GitHub secrets)
        echo "GITHUB_TOKEN=${{ secrets.TEST_GITHUB_TOKEN }}" >> .env
        echo "FIRECRAWL_API_KEY=${{ secrets.TEST_FIRECRAWL_KEY }}" >> .env
    
    - name: Run linting
      run: |
        cd backend
        python -m flake8 --max-line-length=100 --exclude=tests/ .
    
    - name: Run type checking
      run: |
        cd backend
        python -m mypy --ignore-missing-imports . || true  # Allow failures for now
    
    - name: Run security checks
      run: |
        cd backend
        python -m bandit -r . -x tests/ || true  # Allow failures for now
    
    - name: Run unit tests
      run: |
        cd backend
        python -m pytest tests/ -v \
          --cov=config \
          --cov=utils \
          --cov=enhanced_strands_tools \
          --cov=enhanced_tools_additional \
          --cov=enhanced_strands_agent \
          --cov-report=xml \
          --cov-report=term-missing \
          -m "unit"
    
    - name: Run integration tests (if API keys available)
      if: ${{ secrets.TEST_GITHUB_TOKEN && secrets.TEST_FIRECRAWL_KEY }}
      run: |
        cd backend
        python -m pytest tests/ -v -m "integration" || true  # Allow failures
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-without-api-keys:
    runs-on: ubuntu-latest
    name: Test without API keys
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd backend
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run tests without API keys
      run: |
        cd backend
        # Don't set any API keys to test fallback behavior
        python -m pytest tests/ -v -m "unit and not api" --tb=short
    
    - name: Test CLI runner
      run: |
        cd backend
        python run_tests.py --unit --no-coverage --verbose

  test-docker:
    runs-on: ubuntu-latest
    name: Test in Docker environment
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        cat > Dockerfile.test << EOF
        FROM python:3.10-slim
        
        WORKDIR /app
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            build-essential \
            && rm -rf /var/lib/apt/lists/*
        
        # Copy requirements first for better caching
        COPY backend/requirements*.txt ./
        RUN pip install --no-cache-dir -r requirements.txt
        RUN pip install --no-cache-dir -r requirements-test.txt
        
        # Copy application code
        COPY backend/ ./
        
        # Run tests
        CMD ["python", "-m", "pytest", "tests/", "-v", "-m", "unit"]
        EOF
        
        docker build -f Dockerfile.test -t ai-tool-intelligence-test .
    
    - name: Run tests in Docker
      run: |
        docker run --rm ai-tool-intelligence-test

  performance-test:
    runs-on: ubuntu-latest
    name: Performance and load testing
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd backend
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install pytest-benchmark
    
    - name: Run performance tests
      run: |
        cd backend
        python -m pytest tests/ -v -m "slow" --benchmark-only || true
    
    - name: Test memory usage
      run: |
        cd backend
        python -c "
        import psutil
        import os
        from enhanced_strands_agent import EnhancedStrandsAgentService
        
        process = psutil.Process(os.getpid())
        initial_memory = process.memory_info().rss / 1024 / 1024  # MB
        
        # Create service
        service = EnhancedStrandsAgentService()
        
        final_memory = process.memory_info().rss / 1024 / 1024  # MB
        memory_used = final_memory - initial_memory
        
        print(f'Initial memory: {initial_memory:.2f} MB')
        print(f'Final memory: {final_memory:.2f} MB')
        print(f'Memory used: {memory_used:.2f} MB')
        
        if memory_used > 100:  # Alert if using more than 100MB
            print('WARNING: High memory usage detected')
        "

  security-audit:
    runs-on: ubuntu-latest
    name: Security audit
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
    
    - name: Install safety
      run: |
        pip install safety
    
    - name: Check for security vulnerabilities
      run: |
        cd backend
        safety check -r requirements.txt || true
        safety check -r requirements-test.txt || true
    
    - name: Run bandit security linter
      run: |
        pip install bandit
        cd backend
        bandit -r . -x tests/ -f json -o bandit-report.json || true
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: backend/bandit-report.json

  code-quality:
    runs-on: ubuntu-latest
    name: Code quality checks
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
    
    - name: Install code quality tools
      run: |
        pip install black isort flake8 mypy
    
    - name: Check code formatting
      run: |
        cd backend
        black --check --diff .
    
    - name: Check import sorting
      run: |
        cd backend
        isort --check-only --diff .
    
    - name: Run flake8
      run: |
        cd backend
        flake8 --max-line-length=100 --statistics .
    
    - name: Run mypy
      run: |
        cd backend
        mypy --ignore-missing-imports . || true