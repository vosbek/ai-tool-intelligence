[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-tool-intelligence"
version = "1.0.0"
description = "Comprehensive research and analysis platform for AI developer tools"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "AI Tool Intelligence Team", email = "support@ai-tool-intelligence.com"}
]
keywords = ["ai", "tools", "research", "analysis", "competitive-intelligence"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Tools",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "flask>=2.3.0",
    "flask-sqlalchemy>=3.0.0",
    "flask-cors>=4.0.0",
    "sqlalchemy>=2.0.0",
    "requests>=2.31.0",
    "beautifulsoup4>=4.12.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
    "click>=8.1.0",
    "schedule>=1.2.0",
    "jinja2>=3.1.0",
    "werkzeug>=2.3.0",
    "psutil>=5.9.0",
    "firecrawl-py>=0.0.16",
    "github3.py>=4.0.1",
    "strands-agents>=0.1.0",
    "strands-agents-tools>=0.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "pytest-benchmark>=4.0.0",
    "factory-boy>=3.3.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pre-commit>=3.3.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "factory-boy>=3.3.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
deploy = [
    "gunicorn>=21.2.0",
    "psycopg2-binary>=2.9.0",
    "redis>=4.6.0",
    "celery>=5.3.0",
]

[project.urls]
Homepage = "https://github.com/ai-tool-intelligence/platform"
Documentation = "https://docs.ai-tool-intelligence.com"
Repository = "https://github.com/ai-tool-intelligence/platform"
Issues = "https://github.com/ai-tool-intelligence/platform/issues"
Changelog = "https://github.com/ai-tool-intelligence/platform/blob/main/docs/development/changelog.md"

[project.scripts]
ai-tool-intelligence = "ai_tool_intelligence.main:cli"

[tool.setuptools.packages.find]
where = ["backend/src"]

[tool.setuptools.package-data]
"ai_tool_intelligence" = ["templates/**/*", "static/**/*"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["ai_tool_intelligence"]
known_third_party = ["flask", "sqlalchemy", "requests", "beautifulsoup4"]

# mypy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = [
    "strands_agents.*",
    "strands_agents_tools.*",
    "firecrawl.*",
    "github3.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "backend/tests",
    "tests/integration",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "slow: Slow tests",
    "api: Tests requiring API keys",
    "database: Database tests",
    "e2e: End-to-end tests",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["backend/src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/migrations/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["backend/tests", "tests", "backend/venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process_function

# Flake8 configuration (in setup.cfg since flake8 doesn't support pyproject.toml yet)
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "venv",
    "migrations",
    "node_modules",
]
per-file-ignores = [
    "__init__.py:F401",
]